from bs4 import BeautifulSoup
import requests
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import numpy as np
import tensorflow as tf
url = 'https://en.wikipedia.org/wiki/2022%E2%80%9323_Premier_League'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

table = soup.find_all('table')[4]

world_titles = table.find_all('th')
world_table_titles = [title.text.strip() for title in world_titles[1:10]]
print(world_table_titles)

df = pd.DataFrame(columns = world_table_titles)

column_data = (table.find_all('tr'))

for row in column_data[1:]:
    row_data = row.find_all(['td', 'th'])
    individual_row_data = [data.text.strip() for data in row_data[1:10]]

    print(individual_row_data)
    length = len(df)
    df.loc[length] = individual_row_data
    
df.to_csv(r'C:\Users\Mitchell (School)\Desktop\PythonCSVFiles\PLList.csv', encoding='utf-8-sig', index = False)

###

url = 'https://www.football-data.co.uk/englandm.php'
page =  requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

table = soup.find_all('table', {'align': 'center', 'cellspacing': '0', 'width': '800'})[1]
body = table.find_all('td', {'valign': 'top'})[1]

links = [link.get('href') for link in body.find_all('a')]
links_text = [link_text.text for link_text in body.find_all('a')]

data_urls = []

prefix = 'http://www.football-data.co.uk/'
for i, text in enumerate(links_text):
    if text == 'Premier League':
        data_urls.append(prefix + links[i])

# removes 28 urls as we only want 22/23 and 23/24 seasons
data_urls = data_urls[:-29]


print(data_urls)


##


csv_url = 'https://www.football-data.co.uk/mmz4281/2324/E0.csv'

df = pd.read_csv(csv_url)

columns_to_keep = ['HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR']
df = df[columns_to_keep].copy()

#Replace 'm in Nott'm Forest
df['HomeTeam'] = df['HomeTeam'].str.replace("'m", "ingham")
df['AwayTeam'] = df['AwayTeam'].str.replace("'m", "ingham")

df.to_csv(r'C:\Users\Mitchell (School)\Desktop\PythonCSVFiles\PLList2.csv', encoding='utf-8-sig', index = False)

df.info()


fig, chart = plt.subplots()
data = df['FTR'].value_counts()

points = data.index
frequency = data.values

#shows that Home wins are more likely to occur
chart.bar(points, frequency)
#plt.show()

fig, chart = plt.subplots()
data = df['FTHG'].value_counts()
points = data.index
frequency = data.values
chart.bar(points,frequency)

#shows that home teams are most likely to score between 0-3 with 1 being the highest
#plt.show()

fig, chart = plt.subplots()
data = df['FTAG'].value_counts()
points = data.index
frequency = data.values
chart.bar(points,frequency)

#shows that away teams are most likely to score 1 
#plt.show()

print(df.isnull().values.sum())

df = pd.get_dummies(df, columns=['HomeTeam'], prefix=['HomeTeam'])
df = pd.get_dummies(df, columns=['AwayTeam'], prefix=['AwayTeam'])

print(df.head())


label_encoder = LabelEncoder()
df['FTR'] = label_encoder.fit_transform(df['FTR'])

print('Unique values for our label are: ',
      df['FTR'].unique())

print('if home team wins label is ', df['FTR'][3])
print('if away team wins label is ', df['FTR'][0])
print('if draw the label is ', df['FTR'][2])

label = df['FTR']
print('result for match in row 1 is ', label[2])
features = df.iloc[:,3:]


df.to_csv(r'C:\Users\Mitchell (School)\Desktop\PythonCSVFiles\updated.csv', encoding='utf-8-sig', index = False)


from sklearn.model_selection import train_test_split
y=np.ravel(label)

X = features
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= .1, shuffle = False)

print("X_train is " + str(X_train.shape))
print("y_train is " + str(y_train.shape))
print("X_test is " + str(X_test.shape))
print("y_test is " + str(y_test.shape))


y_train = tf.keras.utils.to_categorical(y_train, num_classes=3)
y_test = tf.keras.utils.to_categorical(y_test, num_classes=3)

print("size of y_train is " + str(y_train.shape))
print("size of y_test is " + str(y_test.shape))
print(y_train[0])


model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(117, input_dim=39, activation='relu'),
    tf.keras.layers.Dense(10, input_dim=117, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()
model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=17)

plt.plot(history.history['accuracy'])
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train'], loc='upper left')

plt.plot(history.history['loss'])
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train'], loc='upper left')

Xnew = np.array([[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0
]])

print(Xnew.shape)

ynew = np.argmax(model.predict(Xnew), axis=-1)

print("X = %s " % Xnew)
print("Prediction = %s" % ynew[0])

def preprocess_team_name(team_name):
    return team_name.replace("'m", "ingham")

import pandas as pd

def generate_features_for_match(home_team_name, away_team_name, columns):
    # Create a DataFrame with the specified columns
    match_data = pd.DataFrame(columns=columns)

    # Initialize all columns to 0
    match_data.loc[0] = 0

    # Preprocess team names
    home_team_name = preprocess_team_name(home_team_name)
    away_team_name = preprocess_team_name(away_team_name)

    # Set the values for home and away teams based on your preprocessing
    match_data['HomeTeam_' + home_team_name] = 1
    match_data['AwayTeam_' + away_team_name] = 1

    return match_data

home_team_name = "Wolves"  # Replace with the actual home team name
away_team_name = "Liverpool"  # Replace with the actual away team name

columns = features.columns  # Specify the columns based on your training data
Xnew = generate_features_for_match(home_team_name, away_team_name, columns)

# Convert Xnew to a comma-separated string
Xnew_str = ', '.join(map(str, Xnew.iloc[0]))

print("X = %s " % Xnew)
ynew = np.argmax(model.predict(Xnew), axis=-1)

print("Home Team: ", home_team_name)
print("Away Team: ", away_team_name)
print("Predicted Outcome: ", ynew[0])
